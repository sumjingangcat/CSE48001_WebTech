I records what I've learned following the quiz section by section.
I also wrote down what I missed at each flow.

until Quiz Section1:
React is based on Components(fundamental blocks)
Component Function should be PascalCase in naming and it must return "Renderable" content
in-built markdown syntax starts with lowercase so, all your function should be named by starting uppercase.
The purpose of JSX is that you have an easier time defining the target HTML code that should be generated by your components.
JSX allows you to define the target UI / HTML code right inside your JavaScript code - and therefore right inside your components.
JSX code leads to a tree-like code structure that "tells" React how the different components are related and how the UI should look like.
It then executes appropriate commands to manipulate the real DOM to reflect that target structure / code.

until Quiz Section2:
React automatically passes a props object as the first argument to the receiving component.
Props are essentially custom attributes that can be set on components. {} is needed.

until Quiz Section3:
use ../ to change directory as upper
"children" Props vs "Attribute Props" I prefer Attribute Props.
typically store your component functions split across multiple files.
"children" will receive whichever content you pass between the opening and closing tags of your component.

until Quiz Section4:
The component to which the state belongs and its child and descendent components will be re-evaluated as state changes.
you are allowed to call as many Hook function as needed. And they may (and often will) be positioned directly next to each other.
Computed values are values that shouldn't be managed as separate state since they can be derived from other state.

until Quiz Section5:
I can use map() function to dynamically deal with List Content.
CORE_CONCEPTS.map((conceptItem) => <CoreConcept key={conceptItem.title} {...conceptItem} />)
it's interesting to see use map function in this way.

What I learned in this section3 code

React Structure: The App component serves as the entry point for the React application.
State Management: The useState hook manages the selectedTopic state to track the user’s selected topic.
Event Handling: The handleSelect function updates the selectedTopic state when a tab button is clicked and logs the selected button to the console.
Conditional Rendering: The tabContent variable renders different content based on the selected topic. If no topic is selected, it displays a “Please select a topic” message; otherwise, it shows the topic’s title, description, and code.
Component Usage: The code uses components like Header, CoreConcept, and TabButton to build the UI.
Data Management: It utilizes data from CORE_CONCEPTS and EXAMPLES to provide topic-related information.